[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pde-fluid-phi"
version = "0.1.0"
description = "N-Dimensional Neural Operators for High-Reynolds Number Turbulent Flows"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Terragon Labs Research Team", email = "research@terragonlabs.com"},
]
keywords = [
    "neural-operators",
    "computational-fluid-dynamics", 
    "turbulence",
    "fourier-neural-operators",
    "scientific-computing",
    "deep-learning",
    "physics-informed-ml"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "h5py>=3.7.0",
    "netcdf4>=1.6.0",
    "xarray>=2022.6.0",
    "einops>=0.6.0",
    "wandb>=0.13.0",
    "tensorboard>=2.10.0",
    "scikit-learn>=1.1.0",
    "pandas>=1.5.0",
    "mpi4py>=3.1.0",
    "omegaconf>=2.2.0",
    "hydra-core>=1.2.0",
    "tqdm>=4.64.0",
    "rich>=12.5.0",
    "pydantic>=1.10.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
cuda = [
    "cupy-cuda11x>=10.0.0",
    "triton>=2.0.0",
]
viz = [
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    "mayavi>=4.8.0",
    "pyvista>=0.37.0",
    "seaborn>=0.11.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "nbsphinx>=0.8.0",
]
all = [
    "pde-fluid-phi[cuda,viz,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/terragonlabs/pde-fluid-phi"
Documentation = "https://pde-fluid-phi.readthedocs.io"
Repository = "https://github.com/terragonlabs/pde-fluid-phi"
Issues = "https://github.com/terragonlabs/pde-fluid-phi/issues"
Changelog = "https://github.com/terragonlabs/pde-fluid-phi/blob/main/CHANGELOG.md"

[project.scripts]
pde-fluid-phi = "pde_fluid_phi.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
pde_fluid_phi = ["py.typed", "*.yaml", "*.json"]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["pde_fluid_phi"]
known_third_party = [
    "torch", "numpy", "scipy", "matplotlib", "wandb", 
    "hydra", "omegaconf", "einops", "h5py", "netcdf4"
]

# Flake8 configuration
[tool.flake8]
max-line-length = 100
max-complexity = 15
select = ["E", "F", "W", "C90"]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "matplotlib.*",
    "h5py.*",
    "netcdf4.*",
    "wandb.*",
    "triton.*",
    "cupy.*",
    "mayavi.*",
    "pyvista.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/pde_fluid_phi",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/setup.py",
    "*/conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-toml"},
            {id = "check-json"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "22.12.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.11.4",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v0.991",
        hooks = [{id = "mypy", additional_dependencies = ["types-PyYAML"]}]
    },
]